class Node:    def __init__(self, data, ref=None):        self.data = data        self.next = refclass LinkedList:    def __init__(self):        self.head = None    def insert_at_end(self, data):        new_node = Node(data)        if self.head is None:            self.head = new_node            return        last = self.head        while last.next:            last = last.next        last.next = new_node    def insert_values(self, list_of_values):        for value in list_of_values:            self.insert_at_end(value)    def get_length(self):        length = 0        itr = self.head        while itr:            length += 1            itr = itr.next        return length    def print_list(self):        temp = self.head        while temp:            print(temp.data, end="->")            temp = temp.next    def is_palindrome(self):        stack = []        is_palindrome = True        temp = self.head        while temp:            stack.append(temp.data)            temp = temp.next        # traversing the list again        node = self.head        while node is not None:            i = stack.pop()            if node.data == i:                is_palindrome = True            else:                is_palindrome = False                break            node = node.next        return is_palindromefirst = LinkedList()first.insert_values(list_of_values=[1, 2, 3, 2, 1])print(first.is_palindrome())